//using GIO;
//using GModule;
using Gtk;
using GLib;
using Gee;

[DBus (name = "com.rastersoft.dbuildererror")]
public errordomain DBuilderError
{
	ERROR_OBJECT, ERROR_FILE, ERROR_SIGNAL
}
private delegate void DBuilder_main_callback(GLib.Object this,string obj);

namespace DBuilder {

	/**
		This is the interface to allow the client to get access to the server DBuilder
	*/
	[DBus(name = "com.rastersoft.dbuilder")]
	public interface DBuilder : GLib.Object {

		public signal void sent_event(string obj, string event, string callback_name);

		public abstract void add_from_file(string path) throws Error;
		public abstract void connect_signal(string signal_name, string object, string callback) throws Error;
		public abstract void connect_signals() throws Error;

		public abstract void show_widget(string object) throws Error;
		public abstract void show_all_widget(string object) throws Error;
		public abstract void hide_widget(string object) throws Error;

		public abstract string get_string(string object, string property) throws Error;
		public abstract void set_string(string object, string property, string val) throws Error;
		public abstract int get_integer(string object, string property) throws Error;
		public abstract void set_integer(string object, string property, int val) throws Error;
		public abstract bool get_bool(string object, string property) throws Error;
		public abstract void set_bool(string object, string property, bool val) throws Error;
		public abstract double get_float(string object, string property) throws Error;
		public abstract void set_float(string object, string property, double val) throws Error;
		public abstract double get_double(string object, string property) throws Error;
		public abstract void set_double(string object, string property, double val) throws Error;
	}

	public abstract class DBuilderClient : GLib.Object {

		private GLib.Module module = null;

		public DBuilder? create_client (string dbus_server, string dbus_object)	 {

			if (this.module == null) {
				this.module = GLib.Module.open(null,0);
			}

			try {
				DBuilder builder = Bus.get_proxy_sync<DBuilder> (BusType.SESSION, dbus_server, dbus_object);
				builder.sent_event.connect(this.remote_event);
				return builder;
			} catch (Error e) {
				return null;
			}
		}

		/**
		 This callback receives the events produced by the remote widgets
		 and do the desired actions
		 */

		public void remote_event(string obj, string event, string callback_name) {

			GLib.stdout.printf("Received event %s from object %s, for callback %s\n", event, obj, callback_name);
			if (this.module != null) {
				void *my_symbol;
				if (this.module.symbol(callback_name, out my_symbol)) {
					((DBuilder_main_callback)my_symbol)(this,obj);
				} else {
					GLib.stdout.printf("Callback %s not found\n",callback_name);
				}
			} else {
				GLib.stdout.printf("Can't get access to the \n");
			}
		}
	}

	private class DBuilderCallback : GLib.Object {

		public string object;
		public string signal_name;
		public string callback;
		public GLib.Object ? element;
		public DBuilderServer dbuilder;

	}

	void global_callback(GLib.Object sender, DBuilderCallback cb) {

		cb.dbuilder.send_callback(cb);
	}

	   /*
		This class encapsulates a Gtk.Builder over DBus, allowing a remote program
		to load one or several UI files, get access to the properties of all the
		widgets (thanks to the capabilities of Gtk3), and receive the signals generated
		by them
		*/

	[DBus(name = "com.rastersoft.dbuilder")]
	public class DBuilderServer : GLib.Object {

		private Gtk.Builder builder;
		private Gee.List<string> callbacks;
		private Gee.Map<GLib.Object,string> objects;

		public DBuilderServer(Gtk.Builder builder) {
			this.builder = builder;
			this.callbacks = new Gee.ArrayList<string>();
			this.objects = new Gee.HashMap<GLib.Object,string>();
		}

		public signal void sent_event(string obj, string event, string callback_name);

		/**
		 * Specifies the GLADE UI file to load in the Gtk.Builder class
		 * @param path The path to the UI file
		 */

		public void add_from_file(string path) throws DBuilderError {
			try {
				this.builder.add_from_file(path);
			} catch (Error e) {
				throw new DBuilderError.ERROR_FILE(e.message);
			}
		}

		private void do_connection(Builder builder, Object object, string signal_name, string handler_name, Object? connect_object, ConnectFlags flags) {

			var object_w = object as Gtk.Buildable;
			if (object_w != null) {
				this.connect_signal(signal_name,object_w.get_name(),handler_name);
			} else {
				print("The requested object is not a buildable object\n");
			}
		}

		/**
			Connects the signals defined in the Glade editor with the callback specified
		*/
		public void connect_signals() throws DBuilderError {

			this.builder.connect_signals_full(this.do_connection);
		}

		/**
		 * Allows to receive the signals generated by the widgets
		 * @param signal_name The signal to receive
		 * @param object The object from which we want to receive the signal
		 */
		public void connect_signal(string signal_name, string object, string callback_name) throws DBuilderError {

			print("Conecting %s to object %s with callback %s\n".printf(signal_name,object, callback_name));

			var element = this.find_element(object);

			var callback_data = new DBuilderCallback();
			callback_data.object = object;
			callback_data.element = element;
			callback_data.signal_name = signal_name;
			callback_data.callback = callback_name;
			callback_data.dbuilder = this;
			callback_data.ref(); // this ensures that the object survives after exiting this method

			signal_connect(element,signal_name,(GLib.Callback) global_callback, callback_data);

		}

		[DBus(visible = false)]
		public void send_callback(GLib.Object obj) {
			DBuilderCallback cb = (DBuilderCallback) obj;
			this.sent_event(cb.object,cb.signal_name,cb.callback);
		}


		/**
		 * The show, show_all and hide methods must be manually implemented, because
		 * they can't be managed with the GObject properties system
		 */

		public void show_widget(string object) throws DBuilderError {

			Gtk.Widget ? element = (Gtk.Widget) this.builder.get_object(object);
			if (element == null) {
				throw new DBuilderError.ERROR_OBJECT("The object %s doesn't exists".printf(object));
			}
			element.show();
		}

		public void show_all_widget(string object) throws DBuilderError {

			Gtk.Widget ? element = (Gtk.Widget) this.builder.get_object(object);
			if (element == null) {
				throw new DBuilderError.ERROR_OBJECT("The object %s doesn't exists".printf(object));
			}
			element.show_all();
		}

		public void hide_widget(string object) throws DBuilderError {

			Gtk.Widget ? element = (Gtk.Widget) this.builder.get_object(object);
			if (element == null) {
				throw new DBuilderError.ERROR_OBJECT("The object %s doesn't exists".printf(object));
			}
			element.hide();
		}

		/**
			This method searchs a widget by name, and throws an exception if that widget doesn't exist
			@param object The widget name
		*/
		private GLib.Object ? find_element(string object) throws DBuilderError {
			GLib.Object ? element = this.builder.get_object(object);
			if (element == null) {
				throw new DBuilderError.ERROR_OBJECT("The object %s doesn't exists".printf(object));
			}
			return element;
		}

		/**
			Encapsulates the job of getting the value of a property in a widget, allowing to simplify the
			methods for getting those values
			@param object The object that has the property to get the value
			@param property The property to read
			@param type_val The type of the data contained in the property (specified with 'typeof(type)')
			@return A GLib.Value with the data requested
		*/
		private GLib.Value get_value(string object, string property, GLib.Type type_val) throws DBuilderError {

			GLib.Value val = GLib.Value(type_val);
			var element = this.find_element(object);
			element.get_property(property, ref val);
			return val;
		}

		/**
			Encapsulates part of the job of setting the value of a property in a widget
			@param object The object that has the property to get the value
			@param property The property to read
			@param val The value to store
		*/
		private void set_value(string object, string property,GLib.Value val) throws DBuilderError {
			var element = this.find_element(object);
			element.set_property(property,val);
		}

		/**
			Here are the methods to get access to the public internal properties of
			a widget. It takes advantage of the GObject properties system, that
			allows to get access to the properties using a string with the property
			name
		*/

		public string get_string(string object, string property) throws DBuilderError {

			return (this.get_value(object, property, typeof(string))).get_string();
		}

		public void set_string(string object, string property, string val) throws DBuilderError {

			GLib.Value val2 = GLib.Value(typeof(string));
			val2.set_string(val);
			this.set_value(object,property,val2);
		}

		public int get_integer(string object, string property) throws DBuilderError {

			return (this.get_value(object, property, typeof(int))).get_int();
		}

		public void set_integer(string object, string property, int val) throws DBuilderError {

			GLib.Value val2 = GLib.Value(typeof(int));
			val2.set_int(val);
			this.set_value(object,property,val2);
		}

		public bool get_bool(string object, string property) throws DBuilderError {

			return (this.get_value(object, property, typeof(bool))).get_boolean();
		}

		public void set_bool(string object, string property, bool val) throws DBuilderError {

			GLib.Value val2 = GLib.Value(typeof(bool));
			val2.set_boolean(val);
			this.set_value(object,property,val2);
		}

		// must use double because DBus/GVariant doesn't support float
		public double get_float(string object, string property) throws DBuilderError {

			return (this.get_value(object, property, typeof(float))).get_float();
		}

		public void set_float(string object, string property, double val) throws DBuilderError {

			GLib.Value val2 = GLib.Value(typeof(float));
			val2.set_float((float)val);
			this.set_value(object,property,val2);
		}

		public double get_double(string object, string property) throws DBuilderError {

			return (this.get_value(object, property, typeof(double))).get_double();
		}

		public void set_double(string object, string property, double val) throws DBuilderError {

			GLib.Value val2 = GLib.Value(typeof(double));
			val2.set_double(val);
			this.set_value(object,property,val2);
		}
	}
}
